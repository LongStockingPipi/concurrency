
1. wait()：
    1.1. 用于线程阻塞的方法，执行wait()方法的时候，该线程必须拥有这个锁对象的monitor锁，
        调用wait()后调用者会进入阻塞状态，直到其他线程调用该锁对象的notify()或notifyAll()方法；
    1.2. wait()方法必须在synchronized代码块中使用；
    1.3. 调用wait()方法后，该线程同时将释放该对象锁；
    1.4. 四种情况该线程会被唤醒：
        1.4.1. 其他线程调用该锁对象的notify()，且正好唤醒该线程；
        1.4.2. 其他线程调用该锁对象的notifyAll()；
        1.4.3. 该线程被其他线程中断；
        1.4.4. 执行wait()的时候设置了超时时间，到了超时时间后自动唤醒（传入0则是永久等待）；
2. notify()、notifyAll()：
    2.1. notify()只会随机唤醒其中一个线程；notifyAll()则会唤醒所有线程；
    2.2. notify()、notifyAll()方法必须在synchronized代码块中使用；


面试题：
1. 为什么wait()、notify()、notifyAll()定义在Object类中？
    因为本质上这三个方法都是操作锁的，而锁是属于某个对象的而不是线程的，因此必须定义在Object类中。
2. wait()方法属于Object，那么调用Thread.wait()会怎样？
    其实没有问题，但是Thread对象在执行完成后自动调用notifyAll()方法，这样容易产生意想不到的后果，因此，Thread类对象不适合作为锁。
3. notifyAll()唤醒后，没有竞争到锁的线程怎么办？
    没有抢到锁的线程会进入等待状态，等到锁的释放。