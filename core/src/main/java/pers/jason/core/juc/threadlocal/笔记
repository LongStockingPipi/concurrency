ThreadLocal使用场景：
1. 每个线程需要一个独享的对象（通常是工具类，SimpleDateFormat和Random等）
    每个线程内都有自己的实例副本，不共享（类似于量子力学中的平行宇宙）
2. 每个线程内需要保存全局变量


使用ThreadLocal的四点好处：
1. 线程安全
2. 不需要加锁，效率高
3. 共享对象（内部每一个线程有独立的副本），高效地利用内存，节省开销
4. 避免传参麻烦


ThreadLocal的方法：
1. initialValue()：该方法返回当前线程的初始值，这是一个延迟加载的方法，只有调用get()的时候才会触发；
    但是，当调用get()之前已经调用set()设置值的情况下，就不会调用initialValue()方法;
    通常每个线程最多调用一次，但是如果已经调用了remove()方法，则再次调用get()方法依然会调用此方法；
2. set()
3. get()
4. remove()


ThreadLocal原理：
每一个Thread对象中都有一个成员变量ThreadLocalMap，它是Entry数组类型，可以理解是一个Map，key是ThreadLocal实例，value就是我们存储的对象

使用ThreadLocal的注意点：
1. 内存泄漏：
    什么是内存泄漏：一个对象不再有用，但是不能被回收，导致内存一直被占用
    ThreadLocalMap中，每一个Entry都包含一个弱引用的Key和一个强引用的Value
    解决：应该在使用完成后手动调用remove()方法
2. 空指针异常：
    ThreadLocal支持泛型，如果定义的时候泛型使用的是包装类型，但是实际获取的时候使用的是基本类型，则会抛出空指针异常而不是返回NULL；
    本质上并不是ThreadLocal导致的，而是装箱拆箱导致的
3. 线程共享
    如果set()的对象本身是一个线程共享对象，比如static对象，那么get()获取的对象依然是这个共享对象而不是副本，如果这个对象线程不安全，
    则即使使用ThreadLocal依然存在线程安全问题；